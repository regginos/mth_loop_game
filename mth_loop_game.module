<?php
/**
 * @file
 *  the mail file of the module that produces the Loop Game. 
 *  Initially intented to be a music trianing activity at MusTeacH.com.
 *
 * Code: regginos
 * 
 */
/*
TODO: when making new loop or loading a loop either locally or from server,
check for sounds that are already loaded and use them insted of loading all sounds from scratch.
(Some kind of registry of sounds is propably needed).
*/
function mth_loop_game_get_version() {
  return '0.1';
}

/**
 * Implements hook_help().
 */
function mth_loop_game_help($path, $args) {
  if ($path == 'admin/help#loop_game') {
    return '<p>' . t('This module produces a page with loop game.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function mth_loop_game_menu() {
  $module_path = 'loop_game';
  $items[$module_path] = array(
    'title' => 'Loop game',
    'page callback' => 'mth_loop_game_main_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );
  $items[$module_path . '/load'] = array(
    'title' => 'Load Loop',
    'type' => MENU_CALLBACK,
    'page callback' => 'mth_loop_game_load',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );
  $items[$module_path . '/save'] = array(
    'title' => 'Save Loop',
    'type' => MENU_CALLBACK,
    'page callback' => 'mth_loop_game_save',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );
  $items[$module_path . '/nosl'] = array( //nosl = Number Of Saved Loops
    'title' => 'Number of saved Loops',
    'type' => MENU_CALLBACK,
    'page callback' => 'mth_loop_game_get_number_of_saved_loops',
    'access callback' => TRUE,
  );
  $items[$module_path . '/notes'] = array(
    'title' => 'Choose notes',
    'type' => MENU_CALLBACK,
    'page callback' => 'mth_loop_game_note_picker',
    'access callback' => TRUE,
  );
  return $items;
}

function mth_loop_game_main_page($passed_arg = NULL) {
  $path = drupal_get_path('module', 'mth_loop_game');
  $loop_game_settings = array(
    'soundsPath' => $path . '/sounds',
    'allNotes' => mth_loop_game_get_all_notes(),
    'loadPath' => url('loop_game/load'),
    'savePath' => url('loop_game/save'),
    'notesPath' => url('loop_game/notes'),
    'noslPath' => url('loop_game/nosl'),
    'nosl' => mth_loop_game_get_number_of_saved_loops(FALSE),
    'waitHTML' => mth_loop_game_wait_notification(),
    'warningHTML' => mth_loop_game_web_audio_warning(),
    'beatColor' => '#dddddd',
    'currentBeatColor' => '#757575',
  );
  if ($passed_arg && is_numeric($passed_arg)) {
    if ($this_loop = mth_loop_game_load($passed_arg, FALSE)) {
      $loop_game_settings = array_merge($loop_game_settings, $this_loop);
    }
    else {
      $not_found = t('Loop @loop_id was not found', array('@loop_id' => $passed_arg)) . '<br />';
    }
  }
  drupal_add_js(array('mth_loop_game' => $loop_game_settings), 'setting');
  drupal_add_js($path . '/js/buffer-loader.js');
  drupal_add_js($path . '/js/loop_game.js');
  $content = (isset($not_found)) ? '<div id="loop_load_error">' . $not_found . '</div>' . PHP_EOL : '';
  $content .= '<div id="loopGame"></div>' . PHP_EOL;
  $content .= '<div id="ready">' . mth_loop_game_wait_notification() . '</div>' . PHP_EOL;
  $content .= '<div id="controls">' . PHP_EOL;
  $content .= '<div id="start_stop"></div>' . PHP_EOL;
  $content .= '<div id="customize" style="border-style:solid;border-width:1px;"></div>' . PHP_EOL; //styling is here during development. To be removed later
  $content .= '<div id="load_loop" style="background:#cacaca;"></div>' . PHP_EOL; //styling is here during development. To be removed later
  $content .= '<div id="save_loop" style="background:#bababa;"></div>' . PHP_EOL; //styling is here during development. To be removed later
  $content .= '</div>' . PHP_EOL;
  return $content;
}

function mth_loop_game_wait_notification() {
  $text = '<p id="wait">' . t('Wait... Loading...') . '</p>';
  return $text;
}

function mth_loop_game_web_audio_warning() {
  $text = '<p style="color:red;">' . t('WARNING! It seems, your browser does not support web audio.') . '</p>';
  $text .= '<p>' . t('<a href="http://www.w3.org/TR/webaudio/">Web audio</a> is required for the loop game to work correctly.') . '</p>';
  $text .= '<p>' . t('We recommend <a href="http://www.google.com/chrome">Chrome browser</a>, because it supports web audio.') . '</p>';
  $text .= '<p>' . t('Safari supports web audio since version 6.0 and Opera since version 15.0. Support for Firefox is planned from version 23.0.') . '</p>';
  return $text;
}

function mth_loop_game_save($loop) {
  $loop = mth_loop_game_pack_loop($loop);
  global $user;
  $entry = array(
    'uid' => $user->uid,
    'hoop' => $loop,
    'name' => '',
    'created' => REQUEST_TIME,
  );
  if (drupal_write_record('mth_loop_game_loops', $entry)) {
    echo t('loop saved on server. Use @url to share your loop.', array('@url' => url(('loop_game/' . $entry['id']), array('absolute' => TRUE))));
  }
  else {
    echo t('error saving loop on server');
  }
}

/////////////////// TODO: check for all available notes and return them as array ///////////////////////
function mth_loop_game_get_all_notes($echo = TRUE) {
  for ($i = 36; $i <= 84; $i++) {
    $notes_arr[] = $i;
  }
  return $notes_arr;
}

function mth_loop_game_get_number_of_saved_loops($echo = TRUE) {
  $select = db_select('mth_loop_game_loops', 'loops')
    ->fields('loops');
  $result = $select->execute()->fetchAll();
  if ($echo) {
    echo count($result);
  }
  else {
    return count($result);
  }
}

function mth_loop_game_note_picker() {
  $scriptPath = drupal_get_path('module', 'mth_loop_game');
  $html = '<html>';
  $html .= '<head>';
  $html .= '<title>' . t('Choose notes') . '</title>';
  $html .= '<script src="' . file_create_url($scriptPath . '/js/note_picker.js') . '"></script>';
  $html .= '<script src="' . file_create_url($scriptPath . '/js/piano.js') . '"></script>';
  $html .= '</head>';
  $html .= '<body>';
  $html .= '<div id="keyboard"></div>';
  $html .= '<form>';
  $html .= '<div id="notes"></div>';
  $html .= '<input type="button" value="' . t('OK');
  $html .= '" onclick="notePicker.finish();">';
  $html .= '<input type="button" value="' . t('Cancel');
  $html .= '" onclick="notePicker.cancel();">';
  $html .= '</form>';
  $html .= '</body>';
  $html .= '</html>';
  echo $html;
}

function mth_loop_game_load($loop_id, $echo = TRUE) {
  $entry  = array('id' => $loop_id);
  $loop_record = mth_loop_game_entry_load($entry);
  if (!isset($loop_record[0])) {
    if ($echo) {
      echo 'Error: loop entry ' . $loop_id . ' not found!';
    }
    else {
      return FALSE;
    }
  }
  else {
    $loop = mth_loop_game_unpack_loop($loop_record[0]->hoop);
    if ($echo) {
      echo $loop;
    }
    else {
      $loop = json_decode($loop, TRUE);
      $loop_game_settings['loopLength'] = $loop['loopLength'];
      $loop_game_settings['notes'] = $loop['notes'];
      $loop_game_settings['tempo'] = $loop['tempo'];
      $loop_game_settings['pattern'] = $loop['pattern'];
      return $loop_game_settings;
    }
  }
}

/**
 * Read from the database using a filter array.
 *
 * @param $entry
 *   An array containing all the fields used to search the entries in the table.
 *
 * @return
 *   An object containing the loaded entries if found.
 *
 */
function mth_loop_game_entry_load($entry = array()) {
  $select = db_select('mth_loop_game_loops', 'loops')
    ->fields('loops');
  foreach ($entry as $field => $value) {
    $select->condition($field, $value);
  }
  return $select->execute()->fetchAll();
}

function mth_loop_game_get_user_loops($uid){
  $entry  = array('uid' => $uid);
  return mth_loop_game_entry_load($entry);
}

/**
 * Takes a JSON string and reduces it for storage in database.
 */
function mth_loop_game_pack_loop($loop) {
  $long   = array('"loopLength"', '"notes"', '"tempo"', '"pattern"');
  $short = array('"l"', '"n"', '"t"', '"p"');
  $loop = str_replace($long, $short, $loop);
  $loop_arr = json_decode($loop, TRUE);
  foreach ($loop_arr['p'] as $key => $arr) {
    $loop_arr['p'][$key] = mth_loop_game_encode($arr);
  }
  return json_encode($loop_arr);
}

/**
 * Takes a JSON string and expands it back for use in JavaScript.
 */
function mth_loop_game_unpack_loop($loop) {
  $loop_arr = json_decode($loop, TRUE);
  $length = $loop_arr['l'];
  foreach ($loop_arr['p'] as $key => $num) {
    $loop_arr['p'][$key] = mth_loop_game_decode($num, $length);
  }
  $loop = json_encode($loop_arr);
  $short = array('"l"', '"n"', '"t"', '"p"');
  $long   = array('"loopLength"', '"notes"', '"tempo"', '"pattern"');
  return str_replace($short, $long, $loop);
}

/**
 * Takes an array of booleans and returns bitmask representation of that array
 */
function mth_loop_game_encode($arr){
  $result = 0;
  for ($i = 0, $j = 1; $i < count($arr); $i++, $j = $j << 1) {
    if ($arr[$i]){
      $result += $j;
    }
  }
  return $result;
}

/**
 * Takes two numbers and returns an array of booleans.
 * The array represents the bits of the first argument from least significant.
 * The second argument is how many bits to take.
 */
function mth_loop_game_decode($num, $count){
  for ($i = 0, $j = 1; $i < $count; $i++, $j = $j << 1) {
    $result[$i] = ($num & $j) ? 1 : 0;
  }
  return $result;
}
